[{"content":"先说说今天的心情 看到Respwan在Apex的今天的更新上继续作死（逆天的给探路者的勾爪改到固定30s的CD，然后改废了TS），这些没母的改动使得陪伴了我3年的游戏就这样彻底的进入了坟墓，我的心情也是极度的难过， 不知道重生想干什么，也不知道玩家多了对游戏能有什么坏处，但这就是发生， 我不得不告别Apex，这里给上@Leamonheadtv的一段话。\nEnglish: lt's embarrassing and a middle finger to actual gamers.\nChinese: 重生对我们的热爱，和对身法的极致追求，竖了一个中指，并叫我们滚蛋\n参考视频： 如果你只是想添加玻璃方块的Tags到配方中，请先看这\nFabircAPI在\nnet.fabricmc.fabric.api.tag.convention.v2.ConventionalItemTags中提供了GLASS_BLOCKS的标签，直接用就完事。\n后面是我的研究过程\n阶段一：ModItemTagsProvider中构造函数的新写法 1 2 3 public ModItemTagsProvider(FabricDataOutput output, CompletableFuture\u0026lt;RegistryWrapper.WrapperLookup\u0026gt; completableFuture, @Nullable BlockTagProvider blockTagProvider) { super(output, completableFuture, blockTagProvider); } 这样写使得在后面的configure方法中能引入copy函数。\n阶段二：在DataGenerator中重新新建实例 1 2 3 4 5 6 7 8 9 public class ModDataGenerator implements DataGeneratorEntrypoint { @Override public void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) { FabricDataGenerator.Pack pack = fabricDataGenerator.createPack(); FabricTagProvider.BlockTagProvider blockTagsProvider = pack.addProvider(ModBlockTagsProvider::new); pack.addProvider((output, completableFuture) -\u0026gt; new ModItemTagsProvider(output, completableFuture, blockTagsProvider)); } } //ModBlockTagsProvider在这里重新定义ModItemTagsProvider被定义了，所以无需单独再定义ModBlockTagsProvider 阶段三：尝试把BlockTags.IMPERMEABLE复制到GLASS_TAG中 1.尝试新建一个自己的BlockTag(GLASS_LIST)来复制BlockTags.IMPERMEABLE； getOrCreateTagBuilder(ModBlockTags.GLASS_LIST).forceAddTag(BlockTags.IMPERMEABLE);\n2. 然后在ModItemTagsProvider使用copy函数复制到自己的ItemTag(GLASS_TAG)中\nthis.copy(ModBlockTags.GLASS_LIST, ModItemTags.GLASS_TAG); 3. 以上结果在使用recipeProvider生成时没遇到问题，但是游戏运行后结果如下\n[Render thread/ERROR] (Minecraft) Couldn't load tag firstfabricmod:glass_tag as it is missing following references: \u0026lt;#789950127774105602\u0026gt;:impermeable (from firstfabricmod) 所以配方也是无效的\n阶段四，尝试直接copy BlockTags.IMPERMEABLE 代码如下：\nthis.copy(BlockTags.IMPERMEABLE, ModItemTags.GLASS_TAG);\nGLASS_TAG的json文件生成了，但是values是空的 JSON文件内容如下：\n1 2 3 { \u0026#34;values\u0026#34;: [] } 总结： BlockTags.IMPERMEABLE貌似是一个特殊的BlockTag标签，即使被copy到ItemTag中也无法正确被游戏使用（至少我们在Discord Fabric的频道中讨论结果是这样的），最后直接使用FabricAPI提供的Tags就好。\n特别感谢以下两位Fabric频道中的高手给予的帮助 @marea\n@𓆩⟡ 𝑵𝐨𝐯𝐚 ⟡𓆪\n参考代码： Github - AppliedEnergistics 2\n","date":"2025-01-08T00:00:00Z","image":"https://zephyrbd.github.io/images/MCFDev/img4.png","permalink":"https://zephyrbd.github.io/p/firstfabricmoddevlog_4/","title":"个人在给探矿器添加配方时遇到的问题"},{"content":"此文章系转载文章，不适用于该文章底部的版权声明\n作者：莱特雷-letere\n来自：莱特雷-letere\u0026rsquo;s Blog 1 环境准备 1.1 Git下载 前往【Git官网】，下载安装程序 一直点下一步，默认安装即可\n1.2 Hugo下载 前往【Hugo Github Tags】，选择对应版本下载，下载后解压即可 Windows下载版本：hugo_extended_xxxxx_windows_amd64.zip\n2 搭建博客 2.1 创建博客 （1）在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行\n（2）敲打命令hugo new site xxxx创建hugo文件\n（3）敲打命名cd xxxx切换目录，并把hugo.exe复制到刚生成的文件夹中\n（4）敲打命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 （hugo默认是没有主题的，需要进行主题配置）\n2.2 配置主题 （1）前往【Hugo Themes】，查找自己喜欢的主题，进行下载\n（2）这边以【Stack主题】为例，将下载好的主题解压，放到/themes文件夹中\n（3）将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml和content/post/rich-content\n（4）修改 hugo.yaml 中的 theme，将他修改为跟主题文件夹同名\n（5）再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，这里不细说，感兴趣可自行查找相关文章\n3 Github部署 3.1 常规部署 （1）前往【Github官网】，创建仓库 {github用户名}.github.io\n（2）前往Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启 https://{github用户名}.github.io 的地址，这地址也是以后访问博客的地址\n（3）回到hugo文件中，执行命令hugo -D，会生成 public 静态资源文件夹 （4）在 public 执行以下命令上传到github仓库上，第一次上传可能需要输入账号密码 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main （5）上传成功后访问 https://{github用户名}.github.io，成功搭建属于自己的Hugo博客 3.2 Github Action自动部署 （1）Github创建一个新的仓库，用于存放Hugo的主文件 （2）前往Setttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)\n（3）token选择永不过期，并勾选 repo 和 workflow 选项\n（4）为保证安全，将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置\n（5）在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档】 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy （6）在hugo主文件创建.gitignore文件，来避免提交不必要的文件 1 2 3 4 5 6 7 # 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe （7）将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 4 ZephyrBD个人补充部分 第一次使用git的教程 （1）生成（配置）SSH，打开Git Bush，输入\ngit config --global user.name \u0026quot;注册名\u0026quot; 或者\ngit config --global user.email \u0026quot;注册邮箱\u0026quot;\n（2）生成SSH\nssh-keygen -t rsa -C \u0026quot;自己的邮箱\u0026quot;\n生成成功，如下图所示：\nSSH文件存放在C:/User/用户/.ssh下，id_rsa为私钥，id_rsa.pub为公钥。\n（3）github配置SSH\n打开id_rsa.pub文件，全选，复制全文，转到github-\u0026gt;账户-\u0026gt;setting\n（4）选择SSH and GPGkeys，New SSH key （5）自定义一个title，然后粘贴从公钥文件中拷贝的key （6）测试SSH连接\nssh -T git@github.com 按照提示输入yes，回车，提示successfully之类的就说明SSH连接正常，github上的钥匙也会变成绿色\n至此，本地git客户端和远程github建立了联系。 ","date":"2025-01-04T00:00:00Z","image":"https://zephyrbd.github.io/images/HtbuBlog/img1.png","permalink":"https://zephyrbd.github.io/p/howtobuildablog/","title":"【Hugo】Hugo + Github 免费部署自己的博客"},{"content":"参考视频： 相同与区别 PS.修改了上个笔记不对的地方\n仍然要extends FabricRecipeProvider FabricRecipeProvider要求的实现方法和super函数不一样 generate()方法改在了getRecipeGenerator()方法的return中实现 各种配方的生成函数的形参列表发生改变 ShapedRecipeJsonBuilder.create()方法形参列表变化较大（我没研究明白），所以换成createShaped()方法 上述方法的.offerTo()方法第二个参数变为RegistryKey\u0026lt;\u0026gt;类型，所以Identifier.of()如下面这样嵌套，Identifier.of()中填写的参数和视频一致 Example Identifier: RegistryKey.of(RegistryKeys.RECIPE, getRecipeIdentifier( Identifier_HERE );\n这里代码的合成物品以镓矿系列为例子\nExample All: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 public class ModRecipesProvider extends FabricRecipeProvider { private static final List\u0026lt;ItemConvertible\u0026gt; GA_FURNACE = List.of(ModItems.example_item); public ModRecipesProvider(FabricDataOutput output, CompletableFuture\u0026lt;RegistryWrapper.WrapperLookup\u0026gt; registriesFuture) { super(output, registriesFuture); } @Override protected RecipeGenerator getRecipeGenerator(RegistryWrapper.WrapperLookup wrapperLookup, RecipeExporter recipeExporter) { return new RecipeGenerator(wrapperLookup, recipeExporter) { public void generate() { //可逆配方 offerReversibleCompactingRecipes(RecipeCategory.MISC, ModItems.INGOT_GA, RecipeCategory.BUILDING_BLOCKS, ModBlocks.GA_BLOCK); //熔炉 offerSmelting(GA_FURNACE, RecipeCategory.MISC, ModItems.INGOT_GA, 0.7f, 200, \u0026#34;ga_blast_furnace\u0026#34;); //高炉 offerBlasting(GA_FURNACE, RecipeCategory.MISC, ModItems.INGOT_GA, 0.7f, 100, \u0026#34;ga_blast_furnace\u0026#34;); //烟熏炉 offerFoodCookingRecipe(\u0026#34;smoking\u0026#34;, RecipeSerializer.SMOKING, SmokingRecipe::new,600, ModItems.RAW_GA, ModItems.INGOT_GA, 0.35f); //篝火 offerFoodCookingRecipe(\u0026#34;campfire_cooking\u0026#34;, RecipeSerializer.CAMPFIRE_COOKING, CampfireCookingRecipe::new,600, ModItems.RAW_GA, ModItems.INGOT_GA, 0.35f); //有序配方 createShaped(RecipeCategory.MISC, ModItems.GA_EXAMPLE) .pattern(\u0026#34;XXX\u0026#34;) .input(\u0026#39;X\u0026#39;,ModItems.INGOT_GA) .criterion(\u0026#34;has_ga_example\u0026#34;,conditionsFromItem(ModItems.INGOT_GA)) .offerTo(exporter, RegistryKey.of(RegistryKeys.RECIPE, getRecipeIdentifier(Identifier.of(\u0026lt;yourMODID\u0026gt;, \u0026#34;ga_example\u0026#34;)))); //无序配方 createShapeless(RecipeCategory.MISC, Items.FLINT_AND_STEEL,1) .input(ModItems.INGOT_GA) .input(Items.IRON_INGOT) .criterion(\u0026#34;has_flint_steel\u0026#34;,conditionsFromItem(ModItems.INGOT_GA)) .criterion(\u0026#34;has_flint_steel\u0026#34;,conditionsFromItem(Items.IRON_INGOT)) .offerTo(exporter,RegistryKey.of(RegistryKeys.RECIPE, getRecipeIdentifier(Identifier.of(\u0026lt;yourMODID\u0026gt;, \u0026#34;other_flint_and_steel\u0026#34;)))); } }; } @Override public String getName() { return \u0026lt;yourMODID\u0026gt;; } } 参考代码： Issue #4252 · FabricMC/fabric Waystones/../datagen/ModRecipeProvider.java ","date":"2025-01-02T00:00:00Z","image":"https://zephyrbd.github.io/images/MCFDev/img2.png","permalink":"https://zephyrbd.github.io/p/firstfabricmoddevlog_2/","title":"在1.21.4中创建ModRecipesProvider类的相同与区别 V2.0"},{"content":"参考视频： 这里补充一下我在1.21.4中遇到的问题\nregister方法新形式 1.21.2以后的的itemregister方法要写成下面这种新的形式\n1 2 3 4 5 6 7 8 9 public static final Item CUSTOM_ITEM = register(\u0026#34;custom_item\u0026#34;, Item::new, new Item.Settings()); public static Item register(String path, Function\u0026lt;Item.Settings, Item\u0026gt; factory, Item.Settings settings) { final RegistryKey\u0026lt;Item\u0026gt; registryKey = RegistryKey.of(RegistryKeys.ITEM, Identifier.of(\u0026#34;tutorial\u0026#34;, path)); return Items.register(registryKey, factory, settings); } public static void initialize() { } 并且除了添加lang、models.item和textures.item文件夹及其对应json以外，要使得材质正常显示还需添加这样一个文件夹和对应的json\nassets/\u0026lt;namespace\u0026gt;/items\n参考： 关于1.21.4的fabric中创建item的更改内容(即新的json需要的写法)具体见：here\nFabric中文wiki（关于在1.21.2后创建一个item的方法参见）：here\n","date":"2025-01-02T00:00:00Z","image":"https://zephyrbd.github.io/images/MCFDev/img1.png","permalink":"https://zephyrbd.github.io/p/firstfabricmoddevlog_1/","title":"在MC1.21.4中创建Item时候遇到的问题"},{"content":"参考视频： 相同与区别 (PS：Bugjump是真能改)\n仍然要创建一个FoodComponent类 FoodComponent类弃用了snack()、statusEffect()、createStew()等方法 药水效果需要通过ConsumableComponents类来实现 由于2,3，需要创建一个ModFoodConsumableComponents的新类 由于4，在register该食物Item时可能会需要传一个ModFoodConsumableComponents.XXX的参数 在register该食物Item时可以用useRemainder(BOWL)来实现归还碗的效果 文件结构如图：\n这里以EXAMPLE_SOUP为例子\nModItems: 1 2 3 4 5 6 7 8 9 10 11 public class ModItems { public static final Item EXAMPLE_SOUP = register(\u0026#34;example_soup\u0026#34;, Item::new, new Item.Settings() .maxCount(1) .food(ModFoodComponents.EXAMPLE_SOUP,ModFoodConsumableComponents.EXAMPLE_SOUP) //food两个参数，ModFoodComponents.XXX是食物的普通数值和属性 //ModFoodConsumableComponents.XXX是食物给予的药水效果等属性 //这里的XXX要与后面两个类中名称一致 .useRemainder(BOWL));//归还玩家一个碗 ... } ModFoodComponents： 1 2 3 4 5 6 public class ModFoodComponents { //使用alwaysEdible()将使得食物始终可以食用 public static final FoodComponent EXAMPLE_SOUP = new FoodComponent.Builder().nutrition(2).saturationModifier(0.3F).alwaysEdible().build(); ... } ModFoodConsumableComponents: 1 2 3 4 5 6 7 8 9 10 public class ModFoodConsumableComponents { //药水效果需要放到一个StatusEffectInstance类型的List中,但我这没开单独的容器 public static final ConsumableComponent EXAMPLE_SOUP = food().consumeEffect(new ApplyEffectsConsumeEffect(List.of( new StatusEffectInstance(StatusEffects.REGENERATION, 100, 1), new StatusEffectInstance(StatusEffects.ABSORPTION, 2400, 0), new StatusEffectInstance(StatusEffects.FIRE_RESISTANCE, 2400, 0)))) .build(); ... } ","date":"2025-01-02T00:00:00Z","image":"https://zephyrbd.github.io/images/MCFDev/img3.png","permalink":"https://zephyrbd.github.io/p/firstfabricmoddevlog_3/","title":"在MC1.21.4中创建食物的相同与区别"},{"content":"Github开源地址 仓库链接\n智记清单（MCZS To Do）项目说明 一、项目概述 智记清单是一款专为大学生和打工人设计的待办清单程序。它具备提醒功能，能有效帮助用户合理安排事务，其界面直观简洁，易于操作。在设计上充分考虑了用户的时间管理需求及使用体验，还通过随时间变化的背景为程序增添了趣味性。\n二、设计思路 背景与痛点：初入大学或职场，事务繁杂易遗忘重要事项，且多数人在事务安排上缺乏经验。 功能需求分析： 提醒功能：满足学习、社团等活动的提醒需求。 今日待办：让用户清晰知晓当天任务。 易上手：方便新建和管理待办事项。 程序规划： 数据存储模块：运用 json 文件、对象和数组保存用户提醒任务详情，确保数据持久化与高效读写。 数据交互模块：作为模块间数据桥梁，保障程序流畅运行与协同工作。 界面模块：呈现可视化界面，方便用户交互操作。 提醒功能模块：实现提醒逻辑，包括时间设定、触发机制与多种提醒方式。 三、关键技术 json 和结构体应用：通过 todoINFO 结构体数组存放待办事项内容，利用 todoToJson 函数在关闭程序时将结构体转化为 json 对象存盘，借助 jsonArray 管理多个 json 对象，程序打开时用 jsonToTodo 函数转回结构体并添加到 Qlist 容器便于操作。 Qt 框架开发： 信号与槽机制：实现高效对象间事件通信，如设置待办事项点击确认按钮时新建结构体变量，逻辑清晰且代码耦合度低。 布局管理：多种布局管理器确保界面在不同电脑上视觉与操作良好。 类库资源：丰富类库用于创建各类可视化组件，如 QPushButton 类创建按钮。 用户体验支持：如实现背景切换动画，增强趣味性与体验感。 四、作品特色 提醒功能：借助 Windows 系统通知，在 Qtimer 定时器检测下，以醒目的系统通知弹出提醒事项内容与地点。\n背景切换：利用 QDateTime 变量、Qtimer 定时器和 Switch-case 结构实现一天内背景随时间切换壁纸，且有多组可选。 图形化界面：基于 Qt 框架打造，布局合理、按钮一目了然，易于上手操作。 五、项目信息 团队成员： 项目主导及核心代码：ZephyrBD JSON 转换方法：puuuuh 指导老师：CUIT计算机学院老师 版权与开源： 提交给学校的 Alpha 1.0 版本用于特定比赛，请勿外泄。（Github的Releases中的Alpha 1.0版本为公共版） 除背景图片组版权属于美国苹果公司外，其余内容遵循大赛共享协议，现在以 GPL - 2.0 协议开源到该 Github 仓库。 项目文件：包含 MCZS_TO_DO.pro、头文件（如 aboutus.h 等）、源文件（如 aboutus.cpp 等）、界面文件（如 aboutus.ui 等）、资源文件 res.qrc 及其他文件 version.rc。 ","date":"2025-01-02T00:00:00Z","image":"https://zephyrbd.github.io/images/cuitDRace/img1.png","permalink":"https://zephyrbd.github.io/p/cuitappdesignrace/","title":"智记清单（MCZS To Do）Alpha 1.0 发布"},{"content":"为什么MC 1.17 需要使用 Java 16 MC自从1.8就开始使用Java 8，到现在已经用了8个大版本了。mojang也决定从MC 1.17开始使用最近才发布的Java 16（官方给出的解释是有更好的优化，但我觉得应该是mojang用了Java 16的新语法），总的来说，这一举动是好的。\n对玩家有什么影响 显然，过去我们使用Java 8来打开MC，现在Java 8是不可能打开1.17了，那是不是把旧的Java删除就可以了？当然不行，旧版的Java可以帮助我们打开旧的MC版本，删除后就只可以玩1.17了，下面就讲述如何使Java 8和16共存。\n更新步骤一：更新启动器 在我的教程《如何安装Minecraft国际版》已经介绍了HMCL启动器的安装，现在就以HMCL启动器为例，讲述启动器的更新。 1.打开启动器，注意右上角的提示 2.点击它，看到下图所示界面 可以看到自从HMCL 3.3.184开始就支持Java 16了，不过考虑到兼容性，还是推荐更新到最新版（会有更新提示），现在点击右下角的更新出现下图所示界面。 表明开始更新，更新完成后会自动重启，然后就可以看到HMCL版本和刚才更新日志的版本一致了。 视频讲解 视频中是个简单方法，成功了就可以不看后面了（但启动器必须更新） 更新步骤二：Java 16和MC 1.17的安装 1.检测电脑位数\n这个我在如何安装Minecraft国际版已经讲了，不知道的可以去看看。 2.下载Java 16 64位点我 32位点我 3.解压下载的文件并且拷贝到MC文件夹 4.选择版本列表，然后点安装新游戏版本 选择1.17 选择Optifine 选择最新版本 Optifine选择成功后如图所示，然后点击安装 更新步骤三：MC 1.17启动前设置 1.安装成功后如图所示，点击设置 2.勾选启用游戏特定设置 3.选择Java 16的路径（按照图示界面点击） 有关其它的设置可以参考《如何安装Minecraft国际版》里面的讲解。 4.返回并启动游戏 以上自己安装Java 16的教程可以参考下面这个视频 ","date":"2021-06-24T00:00:00Z","image":"https://zephyrbd.github.io/images/htjava/img1.png","permalink":"https://zephyrbd.github.io/p/howtoupdatejava/","title":"如何更新到Java-16"},{"content":"为什么要端口映射？ 现在大部分人的宽带IP地址都是运营商分配给我们的，但一般情况下只会给我们内网IP地址，举个例子：10个人要上网，但10个公网IP太多了，那么就让10个人共用一个“网关”，再由“网关”联网，这样10个人就只用掉一个IP，但我的世界联机的时候，别人和你不在一个“网关”之下，那他就只可以找到你的“网关”，而不知道10个人中那个是你，这个时候就需要一个“中间人”来告诉他你到底是谁，然后你们就可以一起愉快玩耍了，这个“中间人”就是第三方服务器映射的IP\n如何进行端口映射 1.注册SAKURA FRP账号 SAKURA FRP是一个免费的端口映射网站，可以帮我们进行映射，打开网站后界面如图所示。 点击注册账号进行注册（注意：使用 中国大陆节点 必须完成实名认证）进入后如图所示。 2.下载SAKURA FRP客户端 点击上图所示的左侧边栏上的软件下载，打开后按图示点击，或者点我下载客户端 3.安装SAKURA FRP启动器并打开 回到官网，在管理面板上复制访问密钥 回到启动器粘贴并登陆 4.转发端口 打开需要联机的世界，选择对局域网开放 添加一个隧道（找到java那个，没有的话刷新一下，然后选择一个合适的转发服务器，点击创建） 打开隧道就可以了（弹出的提示框中的IP就是你朋友用的） 注意：本方法仅适用于正版玩家\n","date":"2021-03-13T00:00:00Z","image":"https://zephyrbd.github.io/images/htgoon/img1.png","permalink":"https://zephyrbd.github.io/p/howtousetheinternationalversionofminecrafttogoonline/","title":"如何使用国际版我的世界进行联机"},{"content":"为什么突然写这个 当下OLED屏幕弯折角度越来越大，再者之前看到了一个回形针做的一个关于曲面屏的视频，我不由得产生了一个想法——那就是用柔性屏做一个符合但又不局限于传统书本概念的书，所以接下来我就好好的说一下这个想法（本文仅仅阐述我这个概念性的想法，喷子勿看）\n怎样做才像一本书 ①书写 一本传统概念的书，首先要做的就是书写，这大多数电子产品都可以，但书写的体验我敢说绝对不如在真正的纸上书写，所以，我要探索的不仅仅是普通的书本书写，更要舒适的书写，现在能做到在OLED屏幕上写字就像在真纸上的，我只知道两个口碑不错的产品：\n苹果的Apple Pencil 华为的M-Pencil 在这方面，苹果要做的比华为早，书写的体验也是目前业界的佼佼者，假设这本书拥有Apple Pencil的技术，再加上几十块钱的书写膜，那写得舒服的这个问题就解决了，体验也能像这个视频一样。 ②弯折 一本传统的概念书籍来说，能做的第二件事就是正常的弯折，所以上面我提到了这样的OLED屏幕。 虽然这样可以弯折了，但仅仅只能翻折一次，所以要使用Galaxy Fold制作的方法来制造，但这也会使它像Galaxy Fold那样留下无法抹去的折痕，以及这个巨大的弯折半径。 看到这些照片后，相信你也会意识到这些问题都是无法忍受的，但是有一项新技术——ULP-NSSP，可以很好地解决这个问题，就像柔宇科技这个屏幕。 再次假设这本书拥有ULP-NSSP工艺制成的OLED屏幕，折痕和弯折半径的问题也将被解决。\n技术下的新功能 目前已实现了传统图书的功能，现在谈谈未来图书的功能。\n①增强现实（AR）和激光雷达扫描仪 借助于性能强劲的 CPU，比如高通骁龙处理器，再加上4800万像素以上的摄像头，实现了如下图所示的增强现实。 甚至像下面这样通过局域网连接来实现多台设备同时使用一个增强现实场景，这对教育方面将会有巨大的影响，试想老师通过AR技术讲解生物，物理，化学等科目所需演示的实验和模型，那是一件多么不可思议的事情啊！ 以及激光雷达扫描仪 激光雷达 (LiDAR 光探测和测距) 这项先进技术，是通过测量光触及物体并反射回来所需的时间，来确定距离。特制的激光雷达扫描仪利用直接飞行时间 (dToF)，测量室内或室外环境中从最远五米处反射回来的光。 它可从光子层面进行探测，并能以纳秒速度运行，为增强现实及更广泛的领域开启无尽可能。\n②文档的转换和在电子文档上书写 未来的书，当然不能仅仅是一本书，它应该是像上面那样，可以从网上购买各种书籍的版权，而不必支付印刷费用，这将对地球的环境保护做出巨大贡献，而且借助前文提到的强大的书写系统，就可以像阅读真书一般。\n甚至当做笔记本来使用，当你正处在课堂上时，第一个工作区可以查看课本，而第二个工作区用来充当笔记本（工作区后文会介绍），将教科书中的一段话截屏放进笔记本中，再做上注释，这很好地解决了学生记笔记的痛苦， 也可以把第二个工作区设置为练习册和参考书等辅助资料，从此学生的桌面上不再有成堆书本，取而代之的是一本这样的书。\n③多个可拆卸的屏幕和防盗技术 这本书应该有两个屏幕，其中一块是和处理器之类固定在书上的屏幕，另一块则可随意拆卸，为了方便解释，我用纸质笔记本来简单描述一下。 与此同时它还具有下图中的防盗功能，就像现在的手机一般，对丢失的设备进行远程定位、锁定、备份和删除，在保证个人资料安全的同时，也一定程度上解决了书本找不到的问题。 本文阐述了我对未来书籍的一些想法，但是我认为未来肯定不会止步于此，我也希望将来会有更多更好的科技产品服务于我们的生活。。\n资料来源 Apple Pencil—Apple中国\n增强现实—Apple中国\niPad Pro—Apple中国\niCloud—Apple中国\nHUAWEI M-Pencil 套装—华为官网\n柔宇科技—OLED屏幕\n2017 Apple 秋季发布会\n2018 Apple 秋季发布会\n回形针PaperClip—你究竟需要怎样的屏幕？\n","date":"2020-10-03T00:00:00Z","image":"https://zephyrbd.github.io/images/fubook/img1.png","permalink":"https://zephyrbd.github.io/p/thefuturebooks/","title":"我对未来书本的一个设想"},{"content":"安装Java（必须，游戏依赖） 1.查看电脑系统位数 右键此电脑（或者叫计算机或这台电脑），选择属性，如图所示（图片仅供参考） 记住系统位数，一会用得上\n2.打开下载Java的链接 32位系统版本点我\n64位系统版本点我\n下载完成后打开，一直下一步安装完成就可以了（安装成功截图如下） 使用Hello Minecraft Launcher启动器 1.下载和解压Hello Minecraft Launcher 首先，打开HMCL（注：Hello Minecraft Launcher以下均简称HMCL）在mcbbs的帖子，点击如图所示的链接（HMCL官网链接好像挂了，演示时先暂时用百度网盘分享） 为了方便，这里我把网盘链接拿过来了，不过还是建议去原贴下载。\n百度网盘下载地址 提取码: g4hd\n然后按如图所示的点击：\n选择HMCL版本 选择自己的系统（看不懂就选Windows） 打钩后下载 按图所示解压（过程不一定一样，取决于你的解压软件） 2.安装Minecraft 将HMCL启动器复制到自己喜欢的路径，然后双击打开 如果没有正版账号就输入个名字（最好英文） 有正版账号就选择正版登录 选择版本列表，然后点安装新游戏版本 选择自己需要的版本（这里以1.16.3做演示） 然后选择需要的插件和插件版本（强烈建议安装OptiFine，可以减轻渲染的负担，也可以不安装任何插件）（演示时安装OptiFine） 点击安装 安装完成后如图所示 返回后就可以启动游戏了 补充：关于游戏的配置详解 按图示进入配置页面 内存 首先要知道电脑的物理内存（和前面查看系统位数的方法一致） 计算机显示的是 GB，而 HMCL启动器显示的是 MB，因此在修改前要了解进率 1024MB=1GB\n设置内存的一些建议 游戏的内存至少有1024MB（1GB）（32位Java的只支持最高1024MB（1GB））（如果电脑连2048MB（2GB）物理内存都没有，你还是别玩了） 游戏的建议内存最好有4096MB（4GB）（如果自己加了70+的模组，一般建议直接上8192MB（8GB），前提是物理内存比8192MB（8GB）至少大2048MB（2GB）） 注意你的物理内存大小，分配给Minecraft的内存至少比物理内存少2048MB，如果内存不够就不要玩大型模组整合包了 在运行大型模组整合包时，如果需要同时使用OBS或其他录制软件录制视频，物理内存最好为12288 MB (12 GB)或更多，然后为系统保留4096 MB（4GB）的内存 其它设置建议 建议把分辨率设置为 1280*720 （主要因为是16:9的分辨率，方便截图和视频录制） 把启动器设置为 保持启动器可见 （这样方便防止低配电脑退出时卡死，也方便大型模组整合包调试） 如果大型模组整合包启动游戏出问题，可以把查看日志打开（前提你有一定的Java基础） 附：.minecraft目录详解图（仅供参考） ","date":"2020-09-20T00:00:00Z","image":"https://zephyrbd.github.io/images/htIsMC/img1.png","permalink":"https://zephyrbd.github.io/p/howtoinstallminecraft/","title":"如何安装我的世界国际版"}]